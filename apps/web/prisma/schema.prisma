generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Account, Session, User and VerificationToken
// Match next-auth model https://next-auth.js.org/adapters/prisma
// Underscored names are because of this.
model Account {
  id                String  @id @default(cuid())
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserStatus {
  Active
  Disabled
}

enum UserRole {
  Administrator
  StructureManager
  Referent
  Instructor
  ReceptionAgent
}

model User {
  id            String     @id @default(uuid()) @db.Uuid
  firstName     String?
  lastName      String?
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole
  status        UserStatus @default(value: Active)

  location    String?
  title       String?
  description String?
  accounts    Account[]
  sessions    Session[]

  created      DateTime      @default(now())
  updated      DateTime      @default(now())
  mutationLogs MutationLog[]

  organisation   Organisation? @relation(fields: [organisationId], references: [id])
  organisationId String?       @db.Uuid
  followups      Followup[]
  helpRequests   HelpRequest[]

  Beneficiary Beneficiary[]
}

enum OrganisationType {
  Ccas
  Cias
  Commune
  Association
  Ministere
}

model Organisation {
  id            String           @id @db.Uuid
  type          OrganisationType
  name          String
  zipcode       String
  city          String
  address       String
  phone         String
  email         String
  followupTypes FollowupType[]
  users         User[]
  helpRequests  HelpRequest[]
  followups     Followup[]

  Beneficiary Beneficiary[]


  created      DateTime      @default(now())
  updated      DateTime      @default(now())
}

enum FollowupTypeType {
  Legal
  Optional
}

model FollowupType {
  id            String           @id @db.Uuid
  name          String           @unique
  type          FollowupTypeType
  default       Boolean
  organisations Organisation[]
  followups     Followup[]
  helpRequests  HelpRequest[]
}

enum FollowupMedium {
  // Accueil physique sur rendez-vous
  PlannedInPerson
  // Accueil physique spontané
  UnplannedInPerson
  // Échange téléphonique
  PhoneCall
  // Rendez-vous à domicile
  BeneficiaryHouseAppointment
  // Rendez-vous extérieur
  ExternalAppointment
  // Courrier
  PostalMail
  // E-mail
  Email
  // Visioconférence
  Videoconference
  // Entretien avec un tiers
  ThirdParty
}

enum FollowupStatus {
  InProgress
  Done
}

model Followup {
  id      String @id @db.Uuid
  agent   User   @relation(fields: [agentId], references: [id])
  agentId String @db.Uuid

  organisation   Organisation @relation(fields: [organisationId], references: [id])
  organisationId String       @db.Uuid

  beneficiary   Beneficiary    @relation(fields: [beneficiaryId], references: [id])
  beneficiaryId String         @db.Uuid
  medium        FollowupMedium
  date          DateTime       @db.Date

  type   FollowupType @relation(fields: [typeId], references: [id])
  typeId String       @db.Uuid

  synthesis String?

  status           FollowupStatus
  privateSynthesis String?

  helpRequested    Boolean?
  place            String?
  redirected       Boolean?
  organisationName String?
  dueDate          DateTime? @db.Date
  thirdPersonName  String?


  created      DateTime      @default(now())
  updated      DateTime      @default(now())
}

enum HelpRequestStatus {
  // En attente de justificatifs
  WaitingForDocuments
  // En cours d'instruction
  WaitingForDecision
  // Accepté
  Accepted
  // Refusée
  Denied
}

enum PaymentMethod {
  // Virement
  WireTransfer
  // Carte bancaire
  CreditCard
  // Espèces
  Cash
  // Chèque
  Check
  // Bons alimentaire
  FoodStamps
}

enum HelpRequestReason {
  Energy
  Food
  Housing
}

model HelpRequest {
  id      String @id @db.Uuid
  agent   User   @relation(fields: [agentId], references: [id])
  agentId String @db.Uuid

  organisation   Organisation @relation(fields: [organisationId], references: [id])
  organisationId String       @db.Uuid

  beneficiary   Beneficiary @relation(fields: [beneficiaryId], references: [id])
  beneficiaryId String      @db.Uuid

  openingDate DateTime @db.Date

  type   FollowupType @relation(fields: [typeId], references: [id])
  typeId String       @db.Uuid

  financialSupport     Boolean
  externalOrganisation Boolean
  status               HelpRequestStatus

  askedAmount Decimal?

  examinationDate DateTime? @db.Date
  decisionDate    DateTime? @db.Date

  allocatedAmount Decimal?

  paymentMethod         PaymentMethod?
  paymentDate           DateTime?      @db.Date
  handlingDate          DateTime?      @db.Date
  refusalReason         String?
  examiningOrganisation String?
  dispatchDate          DateTime?      @db.Date

  synthesis String?

  privateSynthesis String?

  dueDate DateTime? @db.Date

  fullFile Boolean?
  reason   HelpRequestReason?


  created      DateTime      @default(now())
  updated      DateTime      @default(now())
}

enum BeneficiaryStatus {
  // Actif
  Active
  // Inactif
  Inactive
  // Archivé
  Archived
  // Décédé
  Deceased
}

enum BeneficiaryTitle {
  // M.
  Mister
  // Mme.
  Miss
}

enum Gender {
  Male
  Female
  Other
}

enum BeneficiaryAccomodationMode {
  // Sans hébergement
  None
  // Propriétaire
  Owner
  // Locataire parc social
  SocialRenting
  // Locataire parc privé
  PrivateRenting
  // Logement de fortune
  Fortune
  // Hébergement de type CHRS, CHU, CPH, CADA...
  EmergencyHousing
  // Autre type de logement (hôtel...)
  Other
  // Hébergé chez un tiers
  ThirdPerson
  // Hébergé au domicile parental
  Parents
  // Logement insalubre
  Substandard
  // EHPAD, résidence sénior
  NursingHome
}

enum BeneficiaryFamilySituation {
  // Marié·e
  Married
  // Célibataire
  Single
  // Veuf·ve
  Widow
  // En concubinage
  Cohabitation
  // Pacsé
  CivilUnion
  // En couple avec enfant(s)
  CoupleWithChildren
  // Divorcé
  Divorced
  // Séparé
  Separated
  // Parent isolé avec enfant(s)
  SingleParentWithChildren
  // Autre
  Other
}

enum BeneficiaryMobility {
  //Permis B avec véhicule (voiture, moto, scooter)
  PermitWithVehicle
  //Permis B sans véhicule
  PermitWithoutVehicle
  //Code obtenu
  Code
  //Permis et/ou code en cours
  PermitPending
  //Autres permis (poids lourds, bus)
  OtherPermit
  //Dépendant des transports en commun
  PublicTransport
  //Vélo ou trottinette électrique
  BikeOrEquivalent
  //Permis non valide ou suspendu
  InvalidPermit
  //Véhicule sans permis
  VehicleWithoutPermit
  //Aucun moyen de transport à disposition
  Other
}

enum BeneficiaryGir {
  Level1
  Level2
  Level3
  Level4
  Level5
  Level6
}

enum BeneficiarySocioProfessionalCategory {
  Employed
  Retired
  JobSeeker
  Disability
  SickLeave
  Housewife
  NoActivity
  Other
}

enum IncomeSource {
  //RSA
  Rsa
  //Prime d'activité
  PrimeActivite
  //Prestations familiales
  PrestationsFamiliales
  //Indemnités Pôle Emploi
  IndemnitesPoleEmploi
  //Salaire
  Salaire
  //Retraite
  Retraite
  //ASPA
  Aspa
  //Pension d'invalidité
  PensionInvalidite
  //Indemnités journalières
  IndemnitesJournalieres
  //AAH
  Aah
  //APL
  Apl
  //Autre
  Autre
}

enum BeneficiaryProtectionMeasure {
  //Tutelle
  Tutelle
  //Curatelle simple
  CuratelleSimple
  //Curatelle renforcée
  CuratelleRenforcee
  //Sauvegarde de justice
  SauvegardeDeJustice
  //Habilitation du conjoint
  HabilitationDuConjoint
  //Habilitation familiale
  HabilitationFamiliale
  //Mesure d'accompagnement (Masp/Maj/MJAGBF)
  MesureAccompagnement
  //Mandat de protection future
  MandatDeProtectionFuture
}

enum BeneficiaryOrientationType {
  //Spontanée
  Spontanee
  //Orientation Élu
  Elu
  //Orientation Département
  Departement
  //Orientation Association
  Association
  //Signalement d'un tiers
  Tiers
  //Suivi cabinet
  SuiviCabinet
  //Autre
  Autre
}

model Beneficiary {
  id String @id @db.Uuid

  organisation   Organisation @relation(fields: [organisationId], references: [id])
  organisationId String       @db.Uuid

  agent   User   @relation(fields: [agentId], references: [id])
  agentId String @db.Uuid

  aidantConnectAuthorized Boolean @default(false)

  // General information
  fileNumber                        String                       @unique
  status                            BeneficiaryStatus
  title                             BeneficiaryTitle?
  usualName                         String?
  birthName                         String?
  firstName                         String?
  birthDate                         DateTime?                    @db.Date
  birthPlace                        String?
  deathDate                         DateTime?                    @db.Date
  gender                            Gender?
  nationality                       String?
  accomodationMode                  BeneficiaryAccomodationMode?
  accomodationName                  String?
  accomodationAdditionalInformation String?
  street                            String?
  streetNumber                      String?
  addressComplement                 String?
  zipcode                           String?
  city                              String?
  noPhone                           Boolean?
  phone1                            String?
  phone2                            String?
  email                             String?
  familySituation                   BeneficiaryFamilySituation?
  caregiver                         Boolean?
  minorChildren                     Int?
  majorChildren                     Int?
  mobility                          BeneficiaryMobility?
  administration                    String?
  minister                          String?

  relatives BeneficiaryRelative[]

  // Health
  gir                         BeneficiaryGir?
  doctor                      String?
  healthAdditionalInformation String?
  socialSecurityNumber        String?
  insurance                   String?

  // Occupation
  socioProfessionalCategory     BeneficiarySocioProfessionalCategory?
  occupation                    String?
  employer                      String?
  employerSiret                 String?
  mainIncomeSource              IncomeSource[]
  mainIncomeAmount              Decimal?
  partnerMainIncomeSource       IncomeSource[]
  partnerMainIncomeAmount       Decimal?
  majorChildrenMainIncomeSource IncomeSource[]
  majorChildrenMainIncomeAmount Decimal?
  unemploymentNumber            String?
  pensionOrganisation           String?
  cafNumber                     String?
  bank                          String?
  funeralContract               String?

  // External Organisations
  protectionMeasure       BeneficiaryProtectionMeasure?
  representative          String?
  prescribingOrganisation String?
  orientationType         BeneficiaryOrientationType?
  orientationOrganisation String?
  serviceProviders        String?
  involvedPartners        String?

  additionalInformation String?

  followups    Followup[]
  helpRequests HelpRequest[]


  created      DateTime      @default(now())
  updated      DateTime      @default(now())
}

enum RelativeRelationship {
  //Conjoint
  Conjoint
  //Enfant mineur
  EnfantMineur
  //Enfant majeur
  EnfantMajeur
  //Parent
  Parent
  //Grand-parent
  Grandparent
  //Voisin
  Neighbour
  //Fratrie
  Fratrie
  //Tiers
  Tiers
  //Autre membre de la famille
  AutreMemberDeLaFamille
}

model BeneficiaryRelative {
  id           String                @id @db.Uuid
  lastName     String?
  firstName    String?
  relationship RelativeRelationship?

  city  String?
  email String?
  phone String?

  hosted    Boolean?
  caregiver Boolean?

  beneficiary   Beneficiary @relation(fields: [beneficiaryId], references: [id])
  beneficiaryId String      @db.Uuid

  additionalInformation String?


  created      DateTime      @default(now())
  updated      DateTime      @default(now())
}

model VerificationToken {
  token      String   @id
  identifier String // Email or other user identifier
  expires    DateTime

  @@unique([identifier, token])
}

enum MutationSource {
  User
  Admin
  System
}

model MutationLog {
  id     String         @id @db.Uuid
  date   DateTime
  source MutationSource
  // If user is deleted, we keep history. If system did a mutation this is empty
  by     User?          @relation(fields: [byId], references: [id], onDelete: SetNull)
  byId   String?        @db.Uuid
  // Uuid of the object target of the mutation, if applicable
  aggregateId   String?        @db.Uuid
  data   Json
}

