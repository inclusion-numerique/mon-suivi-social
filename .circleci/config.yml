version: 2.1

orbs:
  skip: theodo/skip@0.1.2
  queue: eddiewebb/queue@1.8.4
  dotenv: anilanar/dotenv@1.0.0
executors:
  node:
    docker:
      - image: cimg/node:18.13.0
        environment:
          TZ: 'UTC'
  node-browsers:
    docker:
      - image: cimg/node:18.13.0-browsers
        environment:
          TZ: 'UTC'

parameters:
  cache_version:
    type: string
    default: '2023-03-11-02'
  virtual_store_dir:
    type: string
    default: './.pnpm'
  lockfile:
    type: string
    default: './pnpm-lock.yaml'
  registry:
    type: string
    default: rg.fr-par.scw.cloud/mss-web-app
  image:
    type: string
    default: mss-web-<< pipeline.git.branch >> | sed -e 's/\//-/g'
  build_version:
    type: string
    default: $CIRCLE_SHA1
  deploy_version:
    type: string
    default: latest
  e2e_version:
    type: string
    default: e2e
  trigger_workflow:
    type: string
    default: "lint_test_build_deploy"
  # Name of the environment to scrap
  scrap_environment_for_branch:
    type: string
    default: ""

workflows:
  version: 2
  lint_test_build_deploy:
    when:
      equal: [ lint_test_build_deploy, << pipeline.parameters.trigger_workflow >> ]
    jobs:
      - prepare_workspace_dependencies
      - prepare_web_prod_dependencies
      - lint:
          requires:
            - prepare_workspace_dependencies
      - test:
          requires:
            - prepare_workspace_dependencies
      - build_web:
          requires:
            - prepare_workspace_dependencies
            - prepare_web_prod_dependencies

      #      - chromatic:
      #          requires:
      #            - prepare_workspace_dependencies

      - test_e2e:
          requires:
            - build_web

      - deploy_web:
          requires:
            - lint
            - test
            #            - chromatic
            - build_web
            # - test_e2e

  scrap_preview_environment:
    # This workflow exclusively runs on the dev branch, with target env to destroy as parameter
    # It should never run with main as a parameter
    when:
      and:
        - not:
            equal: [ main, << pipeline.git.branch >> ]
        - not:
            equal: [ main, << pipeline.parameters.scrap_environment_for_branch >>]
        - << pipeline.parameters.scrap_environment_for_branch >>
        - equal: [ scrap_preview_environment, << pipeline.parameters.trigger_workflow >> ]
    jobs:
      - prepare_workspace_dependencies
      - scrap_preview_environment:
          requires:
            - prepare_workspace_dependencies

jobs:
  prepare_workspace_dependencies:
    executor: node
    resource_class: large
    steps:
      - checkout
      - skip/skip_unchanged:
          paths: pnpm-lock.yaml
      - install_dependencies
      - run:
          name: 'Fetch dependencies'
          command: pnpm install --virtual-store-dir << pipeline.parameters.virtual_store_dir >> --frozen-lockfile
      - save_cache:
          key: << pipeline.parameters.cache_version >>-pnpm-{{ checksum "<< pipeline.parameters.lockfile >>" }}
          paths:
            - << pipeline.parameters.virtual_store_dir >>
            - ./node_modules
            - ./apps/web/node_modules
            - ./apps/cli/node_modules
            - ./packages/cdk/node_modules
            - ./packages/config/node_modules
            - ./packages/e2e/node_modules
            - ./packages/emails/node_modules
            - ./packages/lint/node_modules
            - ./packages/storybook/node_modules
            - ./packages/test/node_modules

  prepare_web_prod_dependencies:
    executor: node
    resource_class: large
    steps:
      - checkout
      - skip/skip_unchanged:
          paths: pnpm-lock.yaml
      - install_pnpm
      - run:
          name: 'Install dependencies'
          command: |
            pnpm install -F @mss/web --prod --node-linker=hoisted --frozen-lockfile
      - save_cache:
          key: << pipeline.parameters.cache_version >>-web-prod-{{ checksum "<< pipeline.parameters.lockfile >>" }}
          paths:
            - ./node_modules
            - ./apps/web/node_modules

  lint:
    executor: node
    resource_class: large
    steps:
      - checkout
      - install_dependencies
      - run:
          name: 'Prisma generate'
          command: pnpm --silent -F @mss/web prisma:generate
      - run:
          name: 'Monorepo manypkg check'
          command: pnpm manypkg check
      - run:
          name: 'Tsc'
          command: pnpm tsc
      - run:
          name: 'Lint'
          command: pnpm lint

  test:
    executor: node
    resource_class: large
    steps:
      - checkout
      - install_dependencies
      - create_dotenv_file
      - run:
          name: 'Prisma generate'
          command: pnpm --silent -F @mss/web prisma:generate
      - run:
          name: 'Test @mss/web'
          command: pnpm --silent -F @mss/web test

  build_web:
    executor: node
    resource_class: large
    steps:
      - checkout
      - setup_docker_web_env
      - setup_remote_docker:
          docker_layer_caching: true
      - install_dependencies
      - create_dotenv_file
      - add_secrets_to_dotenv_file
      - run:
          name: 'Prisma generate'
          command: pnpm --silent -F @mss/web prisma:generate
      - run:
          name: 'Install DSFR'
          command: pnpm --silent -F @mss/web setup:dsfr
      - run:
          name: 'Build next app'
          command: pnpm --silent -F @mss/web build
      - run:
          name: 'Clear dependencies to install only prod dependencies'
          command: |
            rm -rf node_modules
            rm -rf apps/web/node_modules
      - restore_cache:
          keys:
            - << pipeline.parameters.cache_version >>-web-prod-{{ checksum "<< pipeline.parameters.lockfile >>" }}
      - run:
          name: 'Re-generate Prisma after cleaning dependencies'
          command: pnpm --silent -F @mss/web prisma:generate
      - run:
          name: 'Cleanup build'
          command: |
            # standalone not needed for plain build
            rm -rf apps/web/.next/standalone
      - run:
          name: 'Build docker image'
          command: DOCKER_BUILDKIT=1 docker build --progress=plain -t $IMAGE_BUILD_TAG -f docker/web/Dockerfile .
      - run:
          name: 'Login to registry and push image'
          command: |
            docker login $REGISTRY -u nologin --password-stdin \<<< "$CI_SCW_SECRET_KEY"
            docker push $IMAGE_BUILD_TAG

  chromatic:
    executor: node
    resource_class: large
    steps:
      - checkout
      - install_dependencies
      - create_dotenv_file
      - add_secrets_to_dotenv_file
      - run:
          name: 'Setup DSFR'
          command: pnpm --silent -F @mss/web setup:dsfr
      - run:
          name: 'Build storybook and test components'
          command: pnpm --silent -F @mss/storybook chromatic

  test_e2e:
    executor: node-browsers
    resource_class: large
    parallelism: 1
    steps:
      - checkout
      - install_pnpm
      - install_dependencies
      - setup_docker_web_env
      - setup_remote_docker:
          docker_layer_caching: true
      - create_dotenv_file
      - add_secrets_to_dotenv_file
      - run:
          name: 'Login to registry and pull image'
          command: |
            docker login $REGISTRY -u nologin --password-stdin \<<< "$CI_SCW_SECRET_KEY"
            docker pull $IMAGE_BUILD_TAG
      - run:
          name: 'Install playwright'
          # This will be instantly resolved from global store thanks to custom image playwright setup
          command: |
            pnpm --silent -F @mss/e2e install
            pnpx playwright install
      #      - run:
      #          name: 'Up docker-compose'
      #          command: |
      #            docker-compose -f docker/web/docker-compose.ci.yml up
      - run:
          name: 'Run playwright'
          command: |
            SHARD="$((${CIRCLE_NODE_INDEX}+1))"
            pnpm --silent -F @mss/e2e playwright test --shard=${SHARD}/${CIRCLE_NODE_TOTAL}

  deploy_web:
    executor: node
    resource_class: large
    steps:
      - checkout
      - create_dotenv_file
      - install_dependencies
      - add_secrets_to_dotenv_file
      - setup_docker_web_env
      - run:
          name: 'Setup and export database password'
          command: |
            pnpm --silent cli secrets:database:setup $NAMESPACE
            echo "export DATABASE_URL=$(pnpm --silent cli secrets:get DATABASE_PASSWORD_$NAMESPACE)" >> ${BASH_ENV}
      - run:
          name: "Create terraform variables file from environment variables"
          command: |
            pnpm --silent cli terraform:vars-from-env web
      - setup_remote_docker:
          docker_layer_caching: true
      - install_terraform
      - run:
          name: 'Generate Prisma client for this platform'
          command: |
            pnpm --silent -F @mss/web prisma:generate
      - queue/until_front_of_line:
          time: '3'
      - run:
          name: Create Pending Deployment
          command: |
            output="$(pnpm --silent cli github:deployment:create << pipeline.git.branch >>)"
            if [[ $? -ne 0 ]]; then echo "$output"; exit 1; else echo "export DEPLOYMENT_ID=$output" >> ${BASH_ENV}; fi
            echo "Created deployment $DEPLOYMENT_ID"
      - run:
          name: Set deployment status to in progress
          command: pnpm --silent cli github:deployment:update $DEPLOYMENT_ID in_progress 'Terraform stack deployment'
      - run:
          name: 'Deploy stack'
          command: |
            pnpm --silent -F @mss/cdk deploy:web:ci
      - run:
          name: 'Create .env file from deployment outputs'
          command: |
            pnpm --silent cli dotenv:from-cdk web
      - dotenv/source:
          path: .env
      - run:
          name: Set deployment status to migration
          command: pnpm --silent cli github:deployment:update $DEPLOYMENT_ID in_progress -d 'Executing database migrations' -l https://app.circleci.com/pipelines/workflows/$CIRCLE_WORKFLOW_ID
      - run:
          name: 'Migrate database'
          command: |
            pnpm --silent -F @mss/web prisma db push --skip-generate --accept-data-loss
      - run:
          name: Set deployment status to fixtures load
          command: pnpm --silent cli github:deployment:update $DEPLOYMENT_ID in_progress -d 'Loading fixtures' -l https://app.circleci.com/pipelines/workflows/$CIRCLE_WORKFLOW_ID
      - run:
          name: 'Load fixtures'
          command: |
            pnpm --silent cli fixtures:load
      - run:
          name: Set deployment status to success
          command: pnpm --silent cli github:deployment:update $DEPLOYMENT_ID success -d 'Deploy successful' -u https://$WEB_BASE_URL -l https://app.circleci.com/pipelines/workflows/$CIRCLE_WORKFLOW_ID
      - run:
          name: Set deployment status to failed
          command: pnpm --silent cli github:deployment:update $DEPLOYMENT_ID failure -d 'Deploy failed' -l https://app.circleci.com/pipelines/workflows/$CIRCLE_WORKFLOW_ID
          when: on_fail

  scrap_preview_environment:
    executor: node
    resource_class: large
    steps:
      - checkout
      - install_dependencies
      - install_terraform
      - create_dotenv_file
      - add_secrets_to_dotenv_file
      - when:
          condition:
            or:
              - not: << pipeline.parameters.scrap_environment_for_branch >>
              - equal: [ main, << pipeline.parameters.scrap_environment_for_branch >> ]
              - equal: [ dev, << pipeline.parameters.scrap_environment_for_branch >> ]
          steps:
            - run:
                name: 'Canceling job, invalid configuration << pipeline.parameters.scrap_environment_for_branch >>'
                command: |
                  echo "No scrap_environment_for_branch specified, or invalid one. Canceling job"
                  exit 1
      - run:
          name: 'Destroy stack'
          command: |
            TF_VAR_WEB_CONTAINER_IMAGE='placeholder_for_destroy' CDK_FORCE_BRANCH='<< pipeline.parameters.scrap_environment_for_branch >>' pnpm --silent -F @mss/cdk cdktf destroy web --auto-approve
      - run:
          name: Deactivate Github deployments
          command: pnpm --silent cli github:deployment:deactivate << pipeline.parameters.scrap_environment_for_branch >>

commands:
  install_pnpm:
    steps:
      - run:
          name: 'Install pnpm'
          command: sudo corepack enable && corepack prepare pnpm@latest --activate

  install_terraform:
    steps:
      - run:
          name: 'Install Terraform'
          command: |
            wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
            sudo apt update && sudo apt install terraform

  install_dependencies:
    steps:
      - install_pnpm
      - restore_cache:
          keys:
            - << pipeline.parameters.cache_version >>-pnpm-{{ checksum "<< pipeline.parameters.lockfile >>" }}

  create_dotenv_file:
    steps:
      - run:
          name: "Create .env file from .env.dist"
          command: |
            cp .env.dist .env

  add_secrets_to_dotenv_file:
    steps:
      - run:
          name: "Add project secrets to .env"
          command: |
            SCW_ACCESS_KEY=$CI_SCW_ACCESS_KEY SCW_SECRET_KEY=$CI_SCW_SECRET_KEY pnpm --silent cli dotenv:from-secrets project
      - run:
          name: "Add web secrets to .env"
          command: |
            pnpm --silent cli dotenv:from-secrets web

  setup_docker_web_env:
    steps:
      - run:
          name: "Set docker env vars"
          command: |
            echo "export REGISTRY=<< pipeline.parameters.registry >>" >> ${BASH_ENV}
            echo "export BRANCH='<< pipeline.git.branch >>'" >> ${BASH_ENV}
            echo "export NAMESPACE=$(echo '<< pipeline.git.branch >>' | sed -e 's/\//-/g')" >> ${BASH_ENV}
            echo "export IMAGE_NAME=$(echo 'mss-web-<< pipeline.git.branch >>' | sed -e 's/\//-/g')" >> ${BASH_ENV}
            echo "export IMAGE_BUILD_TAG=$(echo '<< pipeline.parameters.registry >>/$IMAGE_NAME:<< pipeline.parameters.build_version >>')" >> ${BASH_ENV}
            echo "export IMAGE_DEPLOY_TAG=$(echo '<< pipeline.parameters.registry >>/$IMAGE_NAME:<< pipeline.parameters.deploy_version >>')" >> ${BASH_ENV}
            echo "export IMAGE_E2E_TAG=$(echo '<< pipeline.parameters.registry >>/$IMAGE_NAME:<< pipeline.parameters.e2e_version >>')" >> ${BASH_ENV}
            echo "export WEB_CONTAINER_IMAGE=$(echo '<< pipeline.parameters.registry >>/$IMAGE_NAME:<< pipeline.parameters.build_version >>')" >> ${BASH_ENV}

